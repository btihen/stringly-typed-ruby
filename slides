Overcoming Our Obsession With Stringly-Typed Ruby
!TITLE
Overcoming Our Obsession With 
Stringly-Typed Ruby

!TITLE
@davetron5000
(Dave Copeland)

!IMAGE
images/cover.png

!IMAGE
images/dccar2.jpg

!SECTION
Stringly-Typed
From @codinghorror's “New Programmer Jargon”
<a href="http://blog.codinghorror.com/new-programming-jargon/">http://blog.codinghorror.com/new-programming-jargon/</a>

!QUOTE
A riff on “strongly typed”. 
Used to describe an implementation that needlessly relies on strings when programmer & refactor-friendly options are available.

!SECTION
A tale of two zip codes
U.S. postal codes
aka "Zip Codes"

!BULLETS
Zip Codes
* Five Digits, e.g. 90210
* Map to an area of the U.S.

!IMAGE
images/zipcode_map.png

!BULLETS
Simple App
* Store addresses in a DB
* Send letters to an address

!CODE: language=sql
create table addresses(
  id       int          not null,
  street   varchar(256) not null,
  city     varchar(256) not null,
  state    char(2)      not null,
  zip_code char(5)      not null
)

!CODE: language=ruby
class AddressReader
  def read_new_address
    puts "Enter your address"

    puts "street?"
    street   = gets

    puts "city?"
    city     = gets

    puts "state?"
    state    = gets

    puts "zip code?"
    zip_code = gets

    id = $database.insert_into(:addresses,
        street: street,
          city: city,
         state: state,
      zip_code: zip_code)
    
    puts "Created address #{id}"
  end
end

!CODE: language=ruby
module ThirdPartyMailingService
  def self.find_letter(letter_id)
    # ...
  end

  class Letter
    def mail!(street,city,state,zip_code)
      # ...
    end
  end
end

!CODE: language=ruby
class LetterSender
  def send_letter(letter_id,address)

    letter = ThirdPartyMailingService.find_letter(letter_id)
    letter.mail!(address[:street],
                 address[:city],
                 address[:state],
                 address[:zip_code])
  end
end

!CODE: language=ruby
class Mailer
  def send_letter(address_id,letter_id)
    address_hash = $database.select_from(:addresses,
                                         :id => address_id)
    LetterSender.new.send_letter(letter_id, to: address_hash)
    puts "Letter ##{letter_id} sent to"
    puts address_hash[:street]
    puts "#{address_hash[:city], #{address_hash[:state]}, #{address_hash[:zip_code]}"
  end
end

Mailer.new.send_letter(ARGV[0].to_i, ARGV[1].to_i)

!COMMANDLINE
> ./store_address.rb
street?
> 45 S. Fair Oaks Ave
city?
> Beverley Hills
state?
> CA
zip?
> 90210
You created address 42

!COMMANDLINE
> ./send_letter.rb 42 12
Letter #12 sent to
45 S. Fair Oaks Ave
Beverley Hills, CA 90210

!COMMANDLINE
> ./store_address.rb
street?
> 1675 E Altadena Dr
city?
> Altadena
state?
> CA
zip?
> WALSH
You created address 43

!COMMANDLINE
> ./send_letter.rb 43 12
Letter #12 sent to
1675 E Altadena Dr
Altadena, CA WALSH

!NORMAL
Oops

!NORMAL
Must be a problem reading input!

!CODE: language=ruby, callout=3,4
zip_code = gets

unless zip_code =~ /^[0-9]{5}$/
  raise "not a zip code" 
end

!CODE: language=sql
INSERT INTO
  addresses(street,city,state,zip)
VALUES
  ('1675 E Altadena Dr'
   'Altadena',
   'CA',
   'WALSH')

!NORMAL
Oh! Oh!
A problem in our database design!

!CODE: language=sql, callout=5,6,7
ALTER TABLE
  addresses
ADD CONSTRAINT
  looks_like_a_zipcode
CHECK (
  (zip ~* '^[0-9]{5}$')
)

!CODE: language=ruby
LetterSender.new.send_letter(letter_id,
    street: '1675 E Altadena Dr'
      city: 'Altadena',
     state: 'CA',
  zip_code: 'WALSH')

!IMAGE
images/buzz.png

!SECTION
This is not how to build a maintainable system

!IMAGE
images/system.png

!IMAGE
images/loose_boundaries.png

!SECTION
Boundaries

!SECTION
What's coming and what's going

!IMAGE
images/method.png

!CODE: language=java
public Object doit(Object) {
}

